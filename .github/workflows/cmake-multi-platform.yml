name: CMake Multi-Platform Build and Release

on:
  push:
    branches: [ "main" ]  # Runs when pushing to main branch
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build project
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: List build directory contents (for debugging)
      run: ls -R ${{ steps.strings.outputs.build-output-dir }}

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: compiled-binaries-${{ matrix.os }}-${{ matrix.cpp_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}/*

  release:
    needs: build
    runs-on: ubuntu-latest  # Runs after build job completes

    permissions:
      contents: write  # Allows creating releases
      id-token: write  # Required for release tagging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all built artifacts
      uses: actions/download-artifact@v4
      with:
        path: build_artifacts

    - name: List downloaded artifacts (for debugging)
      run: ls -R build_artifacts

    - name: Get current date
      id: date
      run: echo "RELEASE_TAG=v$(date +'%Y-%m-%d-%H%M%S')" >> $GITHUB_ENV
    
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        release_name: "Release ${{ env.RELEASE_TAG }}"
        body: 'Automatically generated release from GitHub Actions'
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

