name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

  release:
    needs: build
    runs-on: ubuntu-latest  # You can specify any runner here; it will create the release after the build

    permissions:
      contents: write  # Grant write permission for releases
      id-token: write  # Required for generating release tags

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: v1.0.0  # You can use dynamic tags based on commit hash or versioning scheme
        release_name: "Release v1.0.0"
        body: 'Description of the release'
        draft: false  # Set to true if you want to create a draft release
        prerelease: false  # Set to true if itâ€™s a pre-release

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.strings.outputs.build-output-dir }}/your-binary-file  # Path to your compiled binary (make sure to specify the correct path)
        asset_name: your-binary-file  # Name of the asset
        asset_content_type: application/octet-stream
